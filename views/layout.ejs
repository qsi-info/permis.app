<!DOCTYPE html>
<html lang="<%= req.cookies[sails.config.i18n.cookie] || sails.config.i18n.defaultLocale %>">
  <head>
    <title><%- sails.config.appName %></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `link` tags, or asynchronously
        on the client using a solution like AMD (RequireJS).  Or, if you like, you can
        take advantage of Sails' boilerplate asset management.

        By default, stylesheets from your `assets/linker/styles` folder are included
        here automatically.  Both CSS (.css) and LESS (.less) are supported.
        In production, your styles will be minified and concatenated into a single file.
        
        To customize any part of the built-in behavior, just edit your Gruntfile.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <link rel="stylesheet" type="text/css" href="/themes/<%= (sails.settings && sails.settings.app_theme) ? sails.settings.app_theme : 'bootstrap/default' %>.css"/>


    <!--STYLES-->
    <link rel="stylesheet" href="/linker/styles/bootstrap.datepicker.css">
    <link rel="stylesheet" href="/linker/styles/bootstrap.timepicker.min.css">
    <link rel="stylesheet" href="/linker/styles/font-awesome.min.css">
    <link rel="stylesheet" href="/linker/styles/growl.plugin.css">
    <link rel="stylesheet" href="/linker/styles/iconFont.min.css">
    <link rel="stylesheet" href="/linker/styles/loading.plugin.css">
    <link rel="stylesheet" href="/linker/styles/main.css">
    <link rel="stylesheet" href="/linker/styles/onoffswitch.plugin.css">
    <link rel="stylesheet" href="/linker/styles/parsley.plugin.css">
    <link rel="stylesheet" href="/linker/styles/typeahead.plugin.css">
    <!--STYLES END-->


    <!-- PRELOAD ANGULAR -->
    <script type="text/javascript" src="/js/angular/angular.min.js"></script>
    <script type="text/javascript" src="/js/angular/angular-route.min.js"></script>
    <script type="text/javascript" src="/js/angular/angular-animate.min.js"></script>

    <script type="text/javascript" src="/js/application/application.js"></script>
    <script type="text/javascript" src="/js/application/services.js"></script>
    <script type="text/javascript" src="/js/application/controllers.js"></script>
    <!-- <script type="text/javascript" src="/js/application/directives.js"></script> -->

  </head>

  <body>
    <div id="wrap">
      <%- partial('./partials/header.ejs') %>
      <%- body %>
    </div>


    <%- partial('./partials/modals/alert.modal.ejs') %>
    <%- partial('./partials/modals/confirm.modal.ejs') %>


    <!-- Loading GIF -->
    <div class="modal-loading"></div>


    <script type="text/javascript">
    window.addEventListener('load', function () { 

    })
    </script>


    <!--
        Client-side Templates
        ========================

    		HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/linker/templates` folder, then
        include them here automatically.
        
        To customize this behavior to fit your needs, just edit your Gruntfile.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your templates using a server-side stringfile
              before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' boilerplate asset management.

      By default, filesin your `assets/linker/js` folder are included here
      automatically.  Both JavaScript (.js) and CoffeeScript (.coffee) are supported.
      In production, your scripts will be minified and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit your Gruntfile.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/linker/js/socket.io.js"></script>
    <script src="/linker/js/sails.io.js"></script>
    <script src="/linker/js/app.js"></script>
    <script src="/linker/js/jquery.min.js"></script>
    <script src="/linker/js/jquery-ui.min.js"></script>
    <script src="/linker/js/jquery.cookie.js"></script>
    <script src="/linker/js/jquery.sticky.js"></script>
    <script src="/linker/js/bootstrap.min.js"></script>
    <script src="/linker/js/bootstrap.datepicker.js"></script>
    <script src="/linker/js/bootstrap.growl.min.js"></script>
    <script src="/linker/js/bootstrap.timepicker.min.js"></script>
    <script src="/linker/js/handlebars-v2.0.0.js"></script>
    <script src="/linker/js/monent.js"></script>
    <script src="/linker/js/parsley.min.js"></script>
    <script src="/linker/js/typeahead.js"></script>
    <script src="/linker/js/utils.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
